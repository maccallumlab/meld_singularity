Bootstrap: docker
From: nvidia/cuda:11.1.1-devel-ubuntu20.04
Stage: build

%post
    export DEBIAN_FRONTEND=noninteractive

    # Download latest package lists
    apt-get update -y

    # Add Ubuntu repositories
    apt install -y software-properties-common lsb-release
    add-apt-repository "deb http://us.archive.ubuntu.com/ubuntu/ focal universe mulltiverse"
    add-apt-repository "deb http://us.archive.ubuntu.com/ubuntu/ focal-updates universe mulltiverse"

    # Download latest package lists
    apt-get update -y

    # Install tzdata package with UTC as the timezone
    apt-get install -y --no-install-recommends tzdata
    
    # Install tools needed to build
    apt-get install -y --no-install-recommends \
        wget \
        vim \
        less \
        build-essential \
        gcc \
        gfortran \
        flex \
        bison \
        patch \
        bc \
        libbz2-dev \
        xorg-dev \
        swig \
        doxygen \
        libeigen3-dev \
        libfftw3-dev \
        libreadline-dev \
        python3 \
        cython3 \
        python3-dev \
        python3-tk \
        python3-pip \
        python3-setuptools

    # Make build directory
    mkdir /build
    cd /build

    # Install cmake version newer than in ubuntu repository
    apt remove --purge --auto-remove cmake
    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
    apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main"
    apt update
    apt install -y cmake

    # Install mpi packages
    # libpsm2 is for omnipath networking
    apt-get install -y --no-install-recommends \
        libpsm2-dev \
        libopenmpi-dev \
        slurm-client

    # Install python dependencies of meld
    apt-get install -y --no-install-recommends \
        python3-netcdf4 \
        python3-numpy \
        python3-scipy \
        python3-sklearn \
        python3-mpi4py \
        python3-matplotlib \
        python3-tqdm
    pip3 install parmed
    pip3 install mdtraj


    # Install ambertools
    cd /build
    wget https://ambermd.org/downloads/AmberTools21jlmrcc.tar.bz2 -O - | tar -xj
    cd amber20_src/build
    cmake .. \
        -DCMAKE_INSTALL_PREFIX=/usr/local/amber \
        -DMPI=FALSE \
        -DCUDA=FALSE \
        -DBUILD_GUI=FALSE \
        -DBUILD_PERL=FALSE \
        -DBUILD_PYTHON=FALSE \
        -DCOMPILER=GNU \
        -DDOWNLOAD_MINICONDA=FALSE \
        -DDISABLE_TOOLS="addles;cphstats;emil;etc;gbnsr6;gem.pmemd;mdgx;moft;nab;ndiff-2.00;nfe-umbrella-slice;nmode;nmr_aux;paramfit;pbsa;pymsmt;rism;sander;debomd;sff;sqm;xray;xtalutil;saxs;reduce;python_site_packages;cpptraj"
    make -j4
    make install

    # Download and install openmm
    # Update these lines to change the openmm version
    cd /build
    wget --no-check-certificate https://github.com/openmm/openmm/archive/refs/tags/7.6.0.tar.gz -O - | tar zx
    cd openmm-7.6.0
    mkdir build
    cd build
    cmake ..
    make -j4 install PythonInstall

    # Download and install meld
    # Change these lines to change the meld version
    cd /build
    wget --no-check-certificate https://github.com/maccallumlab/meld/archive/master.tar.gz -O - | tar zx
    cd meld-master
    cd plugin
    mkdir build
    cd build
    cmake .. -DPYTHON_EXECUTABLE=/usr/bin/python3
    make -j4 install PythonInstall
    cd ../..
    python3 setup.py install

    # Remove the build directory to make the image smaller
    rm -rf /build

%test
    export PATH=/usr/local/amber/bin:$PATH
    export LD_LIBRARY_PATH=/usr/local/openmm/lib:$LD_LIBRARY_PATH
    tleap -h
    python3 -m openmm.testInstallation
    python3 -m meld.test_install

%environment
    # Environment variables that will be set at runtime
    export PATH=/usr/local/amber/bin:$PATH
    export LD_LIBRARY_PATH=/usr/local/openmm/lib:$LD_LIBRARY_PATH


# Build another environment without the cuda-devel packages
# to save space
Bootstrap: docker
From: nvidia/cuda:11.1.1-runtime-ubuntu20.04
Stage: deploy

%post
    # We setup everything again, but we don't build ambertools,
    # openmm, or meld.

    # Download latest package lists
    apt-get update -y

    # Add Ubuntu repositories
    apt install -y software-properties-common lsb-release
    add-apt-repository "deb http://us.archive.ubuntu.com/ubuntu/ focal universe mulltiverse"
    add-apt-repository "deb http://us.archive.ubuntu.com/ubuntu/ focal-updates universe mulltiverse"

    # Download latest package lists
    apt-get update -y

    # Install tzdata package with UTC as the timezone
    apt-get install -y --no-install-recommends tzdata
    
    # Install tools needed to build
    apt-get install -y --no-install-recommends \
        wget \
        vim \
        less \
        build-essential \
        gcc \
        libreadline-dev \
        python3 \
        cython3 \
        python3-dev \
        python3-tk \
        python3-pip \
        python3-setuptools

    # Install mpi packages
    # libpsm2 is for omnipath networking
    apt-get install -y --no-install-recommends \
        libpsm2-dev \
        libopenmpi-dev \
        slurm-client

    # Install python dependencies of meld
    apt-get install -y --no-install-recommends \
        python3-netcdf4 \
        python3-numpy \
        python3-scipy \
        python3-sklearn \
        python3-mpi4py \
        python3-matplotlib \
        python3-tqdm
    pip3 install parmed
    pip3 install mdtraj

%files from build
    # Copy amber, openmm, and meld files from the build stage
    /usr/local/bin
    /usr/local/amber
    /usr/local/openmm
    /usr/local/lib/python3.8/dist-packages/Meld-0.5.0-py3.8.egg
    /usr/local/lib/python3.8/dist-packages/openmm
    /usr/local/lib/python3.8/dist-packages/simtk
    /usr/local/lib/python3.8/dist-packages/_meldplugin.cpython-38-x86_64-linux-gnu.so

%test
    export PATH=/usr/local/amber/bin:$PATH
    export LD_LIBRARY_PATH=/usr/local/openmm/lib:$LD_LIBRARY_PATH
    tleap -h
    python3 -m openmm.testInstallation
    python3 -m meld.test_install

%environment
    # Environment variables that will be set at runtime
    export PATH=/usr/local/amber/bin:$PATH
    export LD_LIBRARY_PATH=/usr/local/openmm/lib:$LD_LIBRARY_PATH
